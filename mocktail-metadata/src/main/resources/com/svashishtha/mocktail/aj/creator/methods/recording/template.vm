package $packageName;

import java.io.File;
import java.lang.reflect.Method;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.reflect.MethodSignature;
import com.svashishtha.mocktail.metadata.MethodMocktail;
import com.svashishtha.mocktail.metadata.MocktailContainer;
import com.svashishtha.mocktail.repository.ObjectRepository;
import com.svashishtha.mocktail.metadata.aj.creator.MocktailMethodExecutor;
import com.svashishtha.mocktail.metadata.util.UniqueIdGenerator;
import com.svashishtha.mocktail.metadata.aj.creator.MocktailMethodExecutor;

@Aspect
public class RecorderAspect$className {
    
    private MocktailContainer mocktailContainer;
    private ObjectRepository objectRepository;
    private UniqueIdGenerator uniqueIdGenerator;
    private String fqcn;
    private String fileSeparator;
    private String recordingBasePath;
    private String methodName;
    private String mocktailMode;
    private MocktailMethodExecutor methodExecutor;

    public RecorderAspect$className(){
        mocktailContainer = MocktailContainer.getInstance();
        methodExecutor = new MocktailMethodExecutor();

        objectRepository = mocktailContainer
                .getObjectRepository();
        uniqueIdGenerator = mocktailContainer
                .getUniqueIdGenerator();
        fqcn = "$fqcn";

        fileSeparator = File.separator;
        recordingBasePath = "$recordingDirectory";
        mocktailMode = "$mocktailMode";
        mocktailContainer.setMocktailMode(mocktailMode);
    }
    
    #foreach($method in $methods)
    #if ($targetImpl)
    
    @Around("execution(* $fqcn.$method(..)) && target($targetImpl)")
    #else
    
    @Around("execution(* $fqcn.$method(..))")
    #end
    
    public Object advice$method(ProceedingJoinPoint pjp) throws Throwable {
        String recordingFileName = uniqueIdGenerator.getUniqueId("$method", pjp.getArgs()) + "";
        String methodName = "$method";
        return methodExecutor.executeAspect(pjp, recordingFileName, recordingBasePath, methodName);
    }
    #end
    

    private Object mocktailWithSharedData(ProceedingJoinPoint pjp,
            String recordingFileName, boolean voidReturnType, String methodName) throws Throwable {
        Object objectToBeRecorded;
        String recordingDirectoryPath = recordingBasePath + fileSeparator
                + fqcn.replace(".", fileSeparator);

        if (!(new File(recordingDirectoryPath)).exists()) {
            (new File(recordingDirectoryPath)).mkdirs();
        }

        // Get the object to be recorded
        // Ask Recorder to save the recording file
        if (!objectRepository.objectAlreadyExist(recordingFileName,
                recordingDirectoryPath)) {

            objectToBeRecorded = pjp.proceed();
            if (!voidReturnType) {
                System.out
                        .println("Recording not already in place so doing the recording:"
                                + recordingFileName
                                + ":methodName:"
                                + methodName);
                objectRepository.saveObject(objectToBeRecorded,
                        recordingFileName, recordingDirectoryPath);
            }
        } else {
            System.out.println("object already exists so not saving it:"
                    + recordingFileName + ":methodName:" + methodName);
            objectToBeRecorded = objectRepository.getObject(
                    recordingFileName, recordingDirectoryPath);
        }
        return objectToBeRecorded;
    }
}