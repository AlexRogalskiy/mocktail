package $packageName;

import java.io.File;
import java.lang.reflect.Method;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.reflect.MethodSignature;
import com.svashishtha.mocktail.metadata.MethodMocktail;
import com.svashishtha.mocktail.metadata.MocktailContainer;
import com.svashishtha.mocktail.repository.ObjectRepository;
import com.svashishtha.mocktail.metadata.aj.creator.MocktailMethodExecutor;
import com.svashishtha.mocktail.metadata.util.UniqueIdGenerator;
import com.svashishtha.mocktail.metadata.aj.creator.MocktailMethodExecutor;

@Aspect
public class RecorderAspect$className {
    
    private MocktailContainer mocktailContainer;
    private ObjectRepository objectRepository;
    private UniqueIdGenerator uniqueIdGenerator;
    private String fqcn;
    private String fileSeparator;
    private String recordingBasePath;
    private String methodName;
    private String mocktailMode;
    private MocktailMethodExecutor methodExecutor;

    public RecorderAspect$className(){
        mocktailContainer = MocktailContainer.getInstance();
        methodExecutor = new MocktailMethodExecutor();

        objectRepository = mocktailContainer
                .getObjectRepository();
        uniqueIdGenerator = mocktailContainer
                .getUniqueIdGenerator();
        fqcn = "$fqcn";

        fileSeparator = File.separator;
        recordingBasePath = "$recordingDirectory";
        mocktailMode = "$mocktailMode";
        mocktailContainer.setMocktailMode(mocktailMode);
    }
    
    #foreach($method in $methods)
    #if ($targetImpl)
    
    @Around("execution(* $fqcn.$method(..)) && target($targetImpl)")
    #else
    
    @Around("execution(* $fqcn.$method(..))")
    #end
    
    public Object advice$method(ProceedingJoinPoint pjp) throws Throwable {
        String recordingFileName = uniqueIdGenerator.getUniqueId("$method", pjp.getArgs()) + "";
        String methodName = "$method";
        return methodExecutor.executeAspect(pjp, recordingFileName, recordingBasePath, methodName);
    }
    #end
}